// { Driver Code Starts
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DriverCode
{

    class GFG
    {
        static void Main(string[] args)
        {
            int testcases;// Taking testcase as input
            testcases = Convert.ToInt32(Console.ReadLine());
            while (testcases-- > 0)// Looping through all testcases
            {
                int N = Convert.ToInt32(Console.ReadLine());
                int[] arr = new int[N*N];
                int[,] M = new int[N,N];

                string elements = Console.ReadLine().Trim();
                elements = elements + " " + "0";
                arr = Array.ConvertAll(elements.Split(), int.Parse);
                int k = 0;
                for(int i=0;i<N;i++){
                    for(int j=0;j<N;j++){
                        M[i,j] = arr[k++];
                    }
                }
                Solution obj = new Solution();
                int res = obj.celebrity(M, N);
                Console.Write(res+"\n");
          }

        }
    }
}// } Driver Code Ends


//User function Template for C#


class Solution
    {
        //Complete this function
        public int celebrity(int[,] M, int n)
        {
            Stack<int> stack = new Stack<int>();
            for(int i = 0; i < n ; i++)
            {
                stack.Push(i);
            }
            
            while(stack.Count > 1)
            {
                var first = stack.Pop();
                var second = stack.Pop();
                
                if(M[first,second] == 1)
                {
                    stack.Push(second);
                }
                else
                {
                    stack.Push(first);
                }
            }
            
            var candidate = stack.Pop();
            
            for(int i = 0; i < n; i++)
            {
                if(i != candidate)
                {
                    if(M[i, candidate] == 0 || M[candidate, i] == 1)
                    {
                        return -1;
                    }
                }
            }
            
            return candidate;
        }

    }